a <- available.packages()
a
fixed=c(FALSE,FALSE)
fixed
params <- fixed
params[!fixed]
params[!fixed] <- p
x <- as.Date("1990-01-01")
x
weekdays(x)
months(x)
quarters(x)
x <- Sys.time()
x
p <- as POSIXlt(x)
p <- as.POSIXlt(x)
p
name(unclass(p))
unclass(p)
names(unclass(p))
p$sec
x <- Sys.time()
x
## Already in POSIXct format
source('~/.active-rstudio-document')
makevector()
makeVector()
source('~/.active-rstudio-document')
source('~/Documents/Development/Coursera/020-rprogramming/cachemean.R')
makeVector(c(1,2,3))
x<- makeVector(c(1,2,3))
x <- makeVector(c(1,2,3))
x$getmean()
x$set
cachemean(x)
source('~/Documents/Development/Coursera/020-rprogramming/assignment2/cachematrix.R')
m <- matrix(c(1, 0, 5, 2, 1, 6, 3, 5, 0), nrow=3, ncol=3)
m
solve(m)
cachedM <- makeCacheMatrix(m)
unclass(cachedM)
cachedM$getMatrix
cachedM$getMatrix()
help(solve)
source('~/Documents/Development/Coursera/020-rprogramming/assignment2/cachematrix.R')
source('~/Documents/Development/Coursera/020-rprogramming/assignment2/cachematrix.R')
cachedM$getMatrix()
cacheSolve(m)
cachedM$getSolved()
source('~/.active-rstudio-document')
cacheSolve(m)
cacheSolve(makeCacheMatrix(m))
y <- makeCacheMatrix(m)
y$getMatrix
y$getMatrix()
cacheSolve(y)
y <- makeVector(c(1,2,3))
cachemean(y)
cachemean(y)
source('~/Documents/Development/Coursera/020-rprogramming/assignment2/cachematrix.R')
y$getMatrix()
m <- matrix(c(1, 0, 5, 2, 1, 6, 3, 5, 0), nrow=3, ncol=3)
makeCacheMatrix(m)
y <- makeCacheMatrix(m)
y$getMatrix()
cacheSolve(y)
cacheSolve(y)
cacheSolve(y)
y$getSolved()
source('~/Documents/Development/Coursera/020-rprogramming/assignment2/cachematrix.R')
m <- matrix(c(1, 0, 5, 2, 1, 6, 3, 5, 0), nrow=3, ncol=3)
y <- makeCacheMatrix(m)
cacheSolve(y)
cacheSolve(y)
library(datasets)
data(iris)
iris
?iris
virginica <- iris[Species = "virginica"]
sub.iris <- iris[iris$Species %in% "virginica",]
sub.iris
sepal <- sub.iris[[Sepal.Length]]
sepal <- sub.iris[sub.iris$Sepal.Length,]
sepal
sepal <- NULL
type(sub.iris)
attr(sub.iris)
sub.iris
sub.iris[["Sepal.Length"]]
sepal <- sub.iris[["Sepal.Length"]]
mean(sepal)
colMeans(iris)
applu(iris, 2, mean)
apply(iris, 2, mean)
rowMeans[iris[, 1:4]]
iris[, 1:4]
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 3, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
mtcars
?mtcars
debug(ls)
ls
ls
sapply(mtcars, cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
apply(mtcars, 2, mean)
with(mtcars, tapply(mpg, cyl, mean))
with(mtcars, tapply(hp, cyl, mean))
avghp <- with(mtcars, tapply(hp, cyl, mean))
library(datasets)
data(mtcars)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
source('~/Documents/Development/Coursera/coursera-datascience/012-getdata/week2/quiz2.R')
source('~/Documents/Development/Coursera/coursera-datascience/012-getdata/week2/quiz2.R')
oauth_endpoints("github")
oauth_endpoints("eclau_week2", key="95fe0ce9a2605c7f2a5e", secret="7644cff7a0b67c9c86c07cdbf8b8ec15c0a6d87f")
myApp = oauth_app("eclau_week2", key="95fe0ce9a2605c7f2a5e", secret="7644cff7a0b67c9c86c07cdbf8b8ec15c0a6d87f")
source('~/Documents/Development/Coursera/coursera-datascience/012-getdata/week2/quiz2.R')
install.packages("httr")
oauth_endpoints("github")
myApp <- oauth_app("eclau_week2", key="95fe0ce9a2605c7f2a5e", secret="7644cff7a0b67c9c86c07cdbf8b8ec15c0a6d87f")
githubToken <- oauth2.0_token(oauth_endpoints("github"), myApp)
req <- GET("https://api.github.com/user", gToken)
gToken <- config(token = githubToken)
req <- GET("https://api.github.com/user", gToken)
req
content(req)
stop_for_status(req)
source('~/Documents/Development/Coursera/coursera-datascience/012-getdata/week2/quiz2.R')
oauth_endpoints("github")
## 2. To make your own application, register at at
##    https://github.com/settings/applications. Use any URL for the homepage URL
##    (http://github.com is fine) and  http://localhost:1410 as the callback url
##
##    Replace your key and secret below.
myApp <- oauth_app("eclau_week2", key="95fe0ce9a2605c7f2a5e", secret="7644cff7a0b67c9c86c07cdbf8b8ec15c0a6d87f")
## 3. Get OAuth credentials
githubToken <- oauth2.0_token(oauth_endpoints("github"), myApp)
## 4. Use API
gToken <- config(token = githubToken)
req <- GET("https://api.github.com/user", gToken)
stop_for_status(req)
content(req)
oauth_endpoints("github")
myApp <- oauth_app("eclau_week2", key="95fe0ce9a2605c7f2a5e", secret="7644cff7a0b67c9c86c07cdbf8b8ec15c0a6d87f")
myApp
githubToken <- oauth2.0_token(oauth_endpoints("github"), myApp)
githubToken
gToken <- config(token = githubToken)
gToken
req <- GET("https://api.github.com/user", gToken)
req
req <- GET("https://api.github.com/users/jtleek/repos", gToken)
req
req <- GET("https://api.github.com/repos/jtleek/", gToken)
req
req <- GET("https://api.github.com/repos/jtleek/datasharing", gToken)
req
demo("oauth2-github", package="httr", ask=FALSE)
demo("oauth2-github", package="httr", ask=FALSE)
install.packages(c('httpuv', 'jsonlite'))
install.packages(c("httpuv", "jsonlite"))
library(httpuv)
library(jsonlite)
oauth_endpoints("github")
library(httr)
oauth_endpoints("github")
myAPI <- oauth_app("eclau_week2", key="95fe0ce9a2605c7f2a5e", secret="7644cff7a0b67c9c86c07cdbf8b8ec15c0a6d87f")
githubToken <- oauth2.0_token(oauth_endpoints("github"), myAPI)
gToken <- config(token = githubToken)
req <- GET("https://api.github.com/repos/jtleek/", gToken)
stop_for_status(req)
content(req)
req <- GET("https://api.github.com/repos/jtleek/datasharing", gToken)
stop_for_status(req)
content(req)
oauth_endpoints("github")
## 2. To make your own application, register at at
##    https://github.com/settings/applications. Use any URL for the homepage URL
##    (http://github.com is fine) and  http://localhost:1410 as the callback url
##
##    Replace your key and secret below.
myAPI <- oauth_app("eclau_week2", key="95fe0ce9a2605c7f2a5e", secret="7644cff7a0b67c9c86c07cdbf8b8ec15c0a6d87f")
## 3. Get OAuth credentials
githubToken <- oauth2.0_token(oauth_endpoints("github"), myAPI)
## 4. Use API
gToken <- config(token = githubToken)
req <- GET("https://api.github.com/repos/jtleek/datasharing", gToken)
stop_for_status(req)
content(req)
install.packages("jsonlite")
library(jsonlite)
library(httpuv)
library(httr)
myAPI <- oauth_app("datasharing", key="00a70ae6f507e74b3eb7", secret="415831281f52fdba9e2be343cd820bb5673da3be")
myAPI
githubToken <- oauth2.0_token(oauth_endpoints("github"), myAPI)
req <- GET("https://api.github.com/repos/jtleek/datasharing", config(token = githubToken))
stop_for_status(req)
content(req)
myJSON <- content(req)
myJSON
myJSONParsed <- jsonlite::fromJSON((toJSON(myJSON)))
myJSONParsed
view(myJSONParsed)
#install.packages(c("httr", "httpuv", "jsonlite")
library(httr)
library(httpuv)
library(jsonlite)
## Tutorial https://datatweet.wordpress.com/2014/05/14/reading-data-from-github-api-using-r/
## Register https://api.github.com/users/jtleek/repos on https://github.com/settings/applications
## Example code: https://github.com/hadley/httr/blob/master/demo/oauth2-github.r
## Application Name: eclau_week2
## Homepage URL: https://api.github.com/users/jtleek/repos
## Authorization callback URL: http://localhost:1410
## ClientId: 95fe0ce9a2605c7f2a5e
## ClientSecret: 7644cff7a0b67c9c86c07cdbf8b8ec15c0a6d87f
## 1. Find OAuth settings for github
oauth_endpoints("github")
## 2. To make your own application, register at at
##    https://github.com/settings/applications. Use any URL for the homepage URL
##    (http://github.com is fine) and  http://localhost:1410 as the callback url
##
##    Replace your key and secret below.
myAPI <- oauth_app("datasharing", key="00a70ae6f507e74b3eb7", secret="415831281f52fdba9e2be343cd820bb5673da3be")
## 3. Get OAuth credentials
githubToken <- oauth2.0_token(oauth_endpoints("github"), myAPI)
## 4. Use API
myRequest <- GET("https://api.github.com/repos/jtleek/datasharing", config(token = githubToken))
myJSON <- content(myRequest)
myJSONParsed <- jsonlite::fromJSON((toJSON(myJSON)))
view(myJSONParsed)
stop_for_status(myRequest)
myJSONParsed
myRequest
content(myRequest)
myJSONParsed <- jsonlite::fromJSON(myRequest)
myJSON <- content(myRequest)
myJSONParsed <- jsonlite::fromJSON((toJSON(myJSON)))
myJSONParsed
myRequest
library(data.frame)
myJSONParsed
class(myJSONParsed)
length(myJSONParsed)
names(myJSONParsed)
head(myJSONParsed[[1]])
head(myJSONParsed[[1]], n = 5)
lapply(myJSONParsed, class)
lapply(myJSONParsed, dim)
head(myJSONParsed[[created_at]], n = 5)
head(myJSONParsed[[myJSONParsed$created_at]], n = 5)
myJSONParsed[[myJSONParsed$created_at]]
colnames(myJSONParsed)
view(myJSONParsed)
View(myJSONParsed)
myJSONParsed$created_at
install.packages("RMySQL")
)
library(RMySQL)
source('~/Documents/Development/Coursera/coursera-datascience/012-getdata/week2/quiz2.R')
install.packages("sqldf")
library(RMySQL)
library(sqldf)
csvFile <- "ss06pid.csv"
setwd("~/Documents/Development/Coursera/coursera-datascience/012-getdata/week2")
DT <- fread(csvFile)
library(sqldf)
DT <- fread(csvFile)
library(data.table)
install.packages(data.table)
library(data.table)
install.packages("data.table")
library(data.table)
csvFile <- "ss06pid.csv"
DT <- fread(csvFile)
acs <- fread(csvFile)
class(acs)
acs
sqldf("select * from acs")
read.csv.sql(csvFile, sql="select pwgtp1 from acs where AGEP < 50")
sqldf("select pwgtp1 from acs where AGEP < 50")
acs
sqldf("select pwgtp1 from acs where AGEP < 50", method = "name_class")
data()
acs <- as.data.frame(acs)
sqldf("select pwgtp1 from acs where AGEP < 50")
acs
class(acs)
setwd("~/Documents/Development/Coursera/coursera-datascience/012-getdata/week2")
install.packages(sqldf)
install.packages("sqldf)
exists()
""
"
install.packages("sqldf")
library(sqldf)
csvFile
acs <- as.data.frame(fread(csvFile))
library(data.table)
acs <- as.data.frame(fread(csvFile))
class(acs)
sqldf("select * from iris limit 5")
data()
tables()
DT
class(DT)
sqldf("select * from DT")
sqldf("select * from acs")
sqldf("select pwgtp1 from acs where AGEP < 50")
unique(acs$AGEP)
sqldf("select distinct AGEP from acs")
con <- url("http://biostat.jhsph.edu/~jleek/contact.html")
con
htmlCode <- readLines(con)
close(con)
htmlCode
class(htmlCode)
DT <- as.data.frame(htmlCode)
DT
DT$1
DT[1,]
DT[2,]
DT[3,]
htmlCode[10]
rep(htmlCode, each=NROW(htmlCode))
html[c(10, 20, 30, 100), ]
htmlCode[c(10, 20, 30, 100), ]
DT <- as.data.frame(htmlCode)
DT
DT[c(10, 20, 30, 100), ]
htmlCode
class(htmlCode)
htmlCode[1,]
htmlCode[1]
c(htmlCode[10], htmlCode[20])
lapply(c(htmlCode[10], htmlCode[20]), nchar)
lapply(c(htmlCode[10], htmlCode[20], htmlCode[30], htmlCode[100]), nchar)
packages.install("LaF")
install.packages("LaF")
library(Laf)
library(LaF)
columnWidths <- c(1, 14, 4, 9, 4, 9, 4, 9, 4, 4)
columnNames <- c("Ignore", "Week", "SST1+2", "SSTA1+2", "SST3", "SSTA3", "SST34", "SSTA34", "SST4", "SSTA4")
columnTypes <- c("string", "string", "double", "double", "double", "double", "double", "double", "double", "double")
myFixedWidth <- laf_open_fwf("getdata-wksst8110.for", column_widths = columnWidths, column_types = columnTypes, column_names = columnNames)
myFixedWidth
myFixedWidth <- laf_open_fwf("getdata-wksst8110.for", column_widths = columnWidths, column_types = columnTypes, column_names = columnNames, trim = TRUE)
myFixedWidth
read_lines(myFixedWidth, c(4, rows=nrow(myFixedWidth)), columns=5)
read.fwf("getdata-wksst8110.for", widths=columnWidths, skip=4, col.names = columnNames)
read.fwf("getdata-wksst8110.for", widths=columnWidths, skip=4, col.names = columnNames)
DF <- read.fwf("getdata-wksst8110.for", widths=columnWidths, skip=4, col.names = columnNames)
DF
head(DF, 3)
DF[DF$SST3,]
DF[DF$SST3,]
DF[1,]
DF[,DF$SST3]
DF[,3]
sum(DF[,4])
sum(DF[,3])
sum(DF[,5])
DF[1,5]
con <- url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode <- readLines(con)
close(con)
lapply(c(htmlCode[10], htmlCode[20], htmlCode[30], htmlCode[100]), nchar)
