a <- available.packages()
a
fixed=c(FALSE,FALSE)
fixed
params <- fixed
params[!fixed]
params[!fixed] <- p
x <- as.Date("1990-01-01")
x
weekdays(x)
months(x)
quarters(x)
x <- Sys.time()
x
p <- as POSIXlt(x)
p <- as.POSIXlt(x)
p
name(unclass(p))
unclass(p)
names(unclass(p))
p$sec
x <- Sys.time()
x
## Already in POSIXct format
source('~/.active-rstudio-document')
makevector()
makeVector()
source('~/.active-rstudio-document')
source('~/Documents/Development/Coursera/020-rprogramming/cachemean.R')
makeVector(c(1,2,3))
x<- makeVector(c(1,2,3))
x <- makeVector(c(1,2,3))
x$getmean()
x$set
cachemean(x)
source('~/Documents/Development/Coursera/020-rprogramming/assignment2/cachematrix.R')
m <- matrix(c(1, 0, 5, 2, 1, 6, 3, 5, 0), nrow=3, ncol=3)
m
solve(m)
cachedM <- makeCacheMatrix(m)
unclass(cachedM)
cachedM$getMatrix
cachedM$getMatrix()
help(solve)
source('~/Documents/Development/Coursera/020-rprogramming/assignment2/cachematrix.R')
source('~/Documents/Development/Coursera/020-rprogramming/assignment2/cachematrix.R')
cachedM$getMatrix()
cacheSolve(m)
cachedM$getSolved()
source('~/.active-rstudio-document')
cacheSolve(m)
cacheSolve(makeCacheMatrix(m))
y <- makeCacheMatrix(m)
y$getMatrix
y$getMatrix()
cacheSolve(y)
y <- makeVector(c(1,2,3))
cachemean(y)
cachemean(y)
source('~/Documents/Development/Coursera/020-rprogramming/assignment2/cachematrix.R')
y$getMatrix()
m <- matrix(c(1, 0, 5, 2, 1, 6, 3, 5, 0), nrow=3, ncol=3)
makeCacheMatrix(m)
y <- makeCacheMatrix(m)
y$getMatrix()
cacheSolve(y)
cacheSolve(y)
cacheSolve(y)
y$getSolved()
source('~/Documents/Development/Coursera/020-rprogramming/assignment2/cachematrix.R')
m <- matrix(c(1, 0, 5, 2, 1, 6, 3, 5, 0), nrow=3, ncol=3)
y <- makeCacheMatrix(m)
cacheSolve(y)
cacheSolve(y)
library(datasets)
data(iris)
iris
?iris
virginica <- iris[Species = "virginica"]
sub.iris <- iris[iris$Species %in% "virginica",]
sub.iris
sepal <- sub.iris[[Sepal.Length]]
sepal <- sub.iris[sub.iris$Sepal.Length,]
sepal
sepal <- NULL
type(sub.iris)
attr(sub.iris)
sub.iris
sub.iris[["Sepal.Length"]]
sepal <- sub.iris[["Sepal.Length"]]
mean(sepal)
colMeans(iris)
applu(iris, 2, mean)
apply(iris, 2, mean)
rowMeans[iris[, 1:4]]
iris[, 1:4]
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 3, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
mtcars
?mtcars
debug(ls)
ls
ls
sapply(mtcars, cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
apply(mtcars, 2, mean)
with(mtcars, tapply(mpg, cyl, mean))
with(mtcars, tapply(hp, cyl, mean))
avghp <- with(mtcars, tapply(hp, cyl, mean))
library(datasets)
data(mtcars)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
source('~/Documents/Development/Coursera/coursera-datascience/012-getdata/week2/quiz2.R')
setwd("~/Documents/Development/Coursera/coursera-datascience/012-getdata/week2")
source('~/Documents/Development/Coursera/coursera-datascience/012-getdata/week2/quiz2.R')
myAPI <- oauth_app("datasharing", key="00a70ae6f507e74b3eb7", secret="415831281f52fdba9e2be343cd820bb5673da3be")
githubToken <- oauth2.0_token(oauth_endpoints("github"), myAPI)
myRequest <- GET("https://api.github.com/repos/jtleek/datasharing", config(token = githubToken))
myJSON <- content(myRequest)
myJSONParsed <- jsonlite::fromJSON((toJSON(myJSON)))
myJSONParsed$created_at
stop_for_status(myRequest)
library(data.table)
library(sqldf)
csvFile <- "ss06pid.csv"
acs <- fread(csvFile)
sqldf("select pwgtp1 from acs where AGEP < 50")
con <- url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode <- readLines(con)
close(con)
lapply(c(htmlCode[10], htmlCode[20], htmlCode[30], htmlCode[100]), nchar)
library(LaF)
columnWidths <- c(1, 14, 4, 9, 4, 9, 4, 9, 4, 4)
columnNames <- c("Ignore", "Week", "SST1+2", "SSTA1+2", "SST3", "SSTA3", "SST34", "SSTA34", "SST4", "SSTA4")
columnTypes <- c("string", "string", "double", "double", "double", "double", "double", "double", "double", "double")
#myFixedWidth <- laf_open_fwf("getdata-wksst8110.for", column_widths = columnWidths, column_types = columnTypes, column_names = columnNames, trim = TRUE)
DF <- read.fwf("getdata-wksst8110.for", widths=columnWidths, skip=4, col.names = columnNames)
sum(DF[,5])
source('~/Documents/Development/Coursera/coursera-datascience/012-getdata/week3/quiz3.R')
source('~/Documents/Development/Coursera/coursera-datascience/012-getdata/week3/quiz3.R')
download.file(sourceURL, destfile = "./data/ss06hid.csv", method = "curl")
download.file(sourceCodeBookURL, destfile = "./data/PUMSDataDict06.pdf", method = "curl")
sourceURL <- url("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
sourceCodeBookURL <- url("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FPUMSDataDict06.pdf")
if (!file.exists("./data")) {
dir.create("./data")
}
download.file(sourceURL, destfile = "./data/ss06hid.csv", method = "curl")
download.file(sourceCodeBookURL, destfile = "./data/PUMSDataDict06.pdf", method = "curl")
source('~/Documents/Development/Coursera/coursera-datascience/012-getdata/week3/quiz3.R')
library(dplyr)
idahoHousing <- readCSV("./data/ss06hid.csv")
idahoHousing <- read.csv("./data/ss06hid.csv")
head(idahoHousing, 10)
which(idahoHousing)
names(idahoHousing)
houseHolds <- subset(idahoHousing, !(is.na(ACR)) & ACR = 3 & !(is.na(AGS)) & AGS = 6, select = c(SERIALNO, ACR, AGS))
houseHolds <- subset(idahoHousing, !(is.na(ACR)) & ACR == 3 & !(is.na(AGS)) & AGS == 6, select = c(SERIALNO, ACR, AGS))
nrows(houseHolds)
head(houseHolds, 10)
transform(idahoHousing, agricultureLogical = !(is.na(ACR)) & ACR == 3 & !(is.na(AGS)) & AGS == 6)
which(agricultureLogical, arr.ind = TRUE)
transform(idahoHousing, VAL = !(is.na(ACR)) & ACR == 3 & !(is.na(AGS)) & AGS == 6)
agricultureLogical <- idahoHousing[idahoHousing$VAL, ]
which(agricultureLogical, arr.ind = TRUE)
which(agricultureLogical == TRUE, arr.ind = TRUE)
agricultureLogical
agricultureLogical <- idahoHousing[, c("VAL")]
agricultureLogical
which(agricultureLogical == TRUE, arr.ind = TRUE)
idahoHousing[, c("ACR", "AGS", "VAL")]
idahoHousing[, c("SERIALNO", "ACR", "AGS", "VAL")]
head(idahoHousing[, c("SERIALNO", "ACR", "AGS", "VAL")], 3)
transform(idahoHousing, VAL = ACR == 3 & AGS == 6)
head(idahoHousing[, c("SERIALNO", "ACR", "AGS", "VAL")], 3)
idahoHousing <- transform(idahoHousing, VAL = ACR == 3 & AGS == 6)
head(idahoHousing[, c("SERIALNO", "ACR", "AGS", "VAL")], 3)
agricultureLogical <- idahoHousing[, c("VAL")]
agricultureLogical
which(agricultureLogical == TRUE, arr.ind = TRUE)
which(agricultureLogical == TRUE, arr.ind = TRUE)[c(1:3)]
install.packages("jpeg")
library(jpeg)
if (!file.exists("./data/jeff.jpg")) {
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", destfile = "./data/jeff.jpg", method = "curl")
}
jeff <- readJPEG("./data/jeff.jpg")
jeff
jeff <- readJPEG("./data/jeff.jpg", native = TRUE)
typeof(jeff)
jeff <- readJPEG("./data/jeff.jpg", native = TRUE)
str(jeff)
quantile(jeff, 0.3)
quantile(jeff, 0.3, 0.8)
quantile(jeff, c(0.3, 0.8))
quantileResult <- quantile(jeff, c(0.3, 0.8))
unname(quantileResults)
quantileResult <- quantile(jeff, c(0.3, 0.8))
unname(quantileResult)
if (!file.exists("./data/GDP.csv")) {
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", destfile = "./data/GDP.csv", method = "curl")
}
if (!file.exists("./data/FEDSTATS_Country.csv")) {
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", destfile = "./data/FEDSTATS_Country.csv", method = "curl")
}
head(GDP.csv, n = 4)
head("./data/GDP.csv", n = 4)
head(gdp, n = 3)
head(fedStatsCountry, n = 3)
gdp <- read.csv("./data/GDP.csv")
fedStatsCountry <- read.csv("./data/GDP.csv")
head(gdp, n = 3)
head(fedStatsCountry, n = 3)
gdp <- read.csv("./data/GDP.csv")
fedStatsCountry <- read.csv("./data/FEDSTATS_Country.csv")
head(gdp, n = 3)
head(fedStatsCountry, n = 3)
gdp <- read.csv("./data/GDP.csv", skip = 5, col.names = c("Country", "Ranking", "Ignore", "Economy", "MillionsOfUSD"))
fedStatsCountry <- read.csv("./data/FEDSTATS_Country.csv")
head(gdp, n = 3)
head(fedStatsCountry, n = 3)
gdp <- read.csv("./data/GDP.csv", skip = 5, colClasses = c(character, integer, "NULL", character, numeric, "NULL"), col.names = c("Country", "Ranking", "Economy", "MillionsOfUSD"), nrows = 190, blank.lines.skip = TRUE)
gdp <- read.csv("./data/GDP.csv", skip = 5, colClasses = c(character, integer, "NULL", character, numeric, "NULL"), col.names = c("Country", "Ranking", "Ignore", "Economy", "MillionsOfUSD", "Ignore"), nrows = 190, blank.lines.skip = TRUE)
gdp <- read.csv("./data/GDP.csv", skip = 5, colClasses = c(character, integer, "NULL", character, numeric, "NULL"), col.names = c("Country", "Ranking", "Ignore", "Economy", "MillionsOfUSD", "Ignore"), nrows = 2, blank.lines.skip = TRUE)
gdp <- read.csv("./data/GDP.csv", header = FALSE, skip = 5, colClasses = c(character, integer, "NULL", character, numeric, "NULL"), col.names = c("Country", "Ranking", "Ignore", "Economy", "MillionsOfUSD", "Ignore"), nrows = 2, blank.lines.skip = TRUE)
gdp <- read.csv("./data/GDP.csv")
head(gdp, n = 3)
gdp <- read.csv("./data/GDP.csv", header = FALSE, skip = 5)
head(gdp, n = 3)
gdp <- read.csv("./data/GDP.csv", header = FALSE, skip = 5, colClasses = c(character, integer, "NULL", character, numeric, "NULL", "NULL", "NULL", "NULL", "NULL"), col.names = c("Country", "Ranking", "Ignore1", "Economy", "MillionsOfUSD", "Ignore2", "Ignore3", "Ignore4", "Ignore5", "Ignore6"), nrows = 2, blank.lines.skip = TRUE)
gdp <- read.csv("./data/GDP.csv", header = FALSE, skip = 5, col.names = c("Country", "Ranking", "Ignore1", "Economy", "MillionsOfUSD", "Ignore2", "Ignore3", "Ignore4", "Ignore5", "Ignore6"))
head(gdp, n = 3)
gdp <- read.csv("./data/GDP.csv", header = FALSE, skip = 5, col.names = c("Country", "Ranking", "Ignore1", "Economy", "MillionsOfUSD", "Ignore2", "Ignore3", "Ignore4", "Ignore5", "Ignore6"), nrows = 190)
head(gdp, n = 3)
tao;(gdp, n = 3)
tail(gdp, n = 3)
head(fedStatsCountry, n = 3)
mergeData <- merge(gdp, fedStatsCountry, by.gdp = "Country", by.fedStatsCountry("CountryCode"), all = TRUE)
mergeData <- merge(gdp, fedStatsCountry, by.x = "Country", by.y("CountryCode"), all = TRUE)
mergeData <- merge(gdp, fedStatsCountry, by.x = "Country", by.y = "CountryCode", all = TRUE)
mergeData
mergeData[, c("Country", "CountryCode")]
names(mergedData)
names(mergeData)
head(gdp, n = 3)
tail(gdp, n = 3)
head(fedStatsCountry, n = 3)
mergeData <- merge(gdp, fedStatsCountry, by.x = "Country", by.y = "CountryCode")
names(mergeData)
fedStatsCountry[, c("CountryCode")]
mergeData <- merge(gdp, fedStatsCountry, by.x = "Country", by.y = "CountryCode", all = TRUE)
names(mergeData)
table(c(gdp$Country, fedStatsCountry$CountryCode))
str(gdp$Country)
str(fedStatsCountry$CountryCode)
mergeData <- merge(gdp, fedStatsCountry, by.x = "Country", by.y = "CountryCode", all = TRUE)
names(mergeData)
dput(mergeData, file = "test.csv")
names(fedStatsCountry)
mergeData[order(-Ranking),]
mergeData[with(mergeData, order(-Ranking)),]
mergeData[with(mergeData, order(-Ranking)),][13]
mergeData[with(mergeData, order(-Ranking)),][13,]
mergeData[, c("Country", "Ranking")]
subset(mergeData[, c("Country", "Ranking")], !is.na(Ranking))
!duplicated(subset(mergeData[, c("Country", "Ranking")], !is.na(Ranking)))
mergeData[!duplicated(subset(mergeData[, c("Country", "Ranking")], !is.na(Ranking))), ]
subset(mergeData[, c("Country", "Ranking")], !is.na(Ranking))
mappedCountry <- subset(mergeData[, c("Country", "Ranking")], !is.na(Ranking))
mappedCountry[row.names(unique(mappedCountry[, c("Country")]))]
mappedCountry[row.names(unique(mappedCountry[, c("Country")]))]
mappedCountry[row.names(unique(mappedCountry[, c("Country")])),]
row.names(unique(mappedCountry[, c("Country")]))
names(mappedCountry)
unique(mappedCountry[, c("Country")])
count(unique(mappedCountry[, c("Country")]))
type(unique(mappedCountry[, c("Country")]))
class(unique(mappedCountry[, c("Country")]))
is.factor(unique(mappedCountry[, c("Country")]))
table(unique(mappedCountry[, c("Country")]))
Summary(unique(mappedCountry[, c("Country")]))
mappedCountry
summary(mappedCountry)
nrow(mappedCountry)
nrow(unique(mappedCountry[, c("Country")]))
unique(mappedCountry[, c("Country")])
table(unique(mappedCountry[, c("Country")]))
table(unique(mappedCountry[, c("Country", "Ranking")]))
library(plyr)
ddply(mappedData, ~Country, summarise, distinctCount = length(unique(Country)))
ddply(mappedCountry, ~Country, summarise, distinctCount = length(unique(Country)))
mappedCountry <- ddply(mappedCountry, ~Country, summarise, distinctCount = length(unique(Country)))
sum(mappedCountry$distinctCount)
mappedCountry <- subset(mergeData[, c("Country", "Ranking")], !is.na(Ranking))
mappedCountry <- ddply(mappedCountry, ~Country, summarise, distinctCount = length(unique(Country)))
library(sqldf)
sqldf("select ranking from mergeData where Income.Group = 'High Income: OECD")
sqldf("select ranking from mergeData")
sqldf("select top 1 * from mergeData")
sqldf("select * from mergeData")
names(mergeData)
sqldf("select Ranking from mergeData where [Income.Group] = 'High Income: OECD")
sqldf("select Ranking from mergeData where [Income.Group] = 'High Income: OECD'")
sqldf("select Ranking from mergeData where [Income.Group] = 'High income: OECD'")
plyr(sqldf("select Ranking from mergeData where [Income.Group] = 'High income: OECD'"), c("Ranking"), average)
ddply(sqldf("select Ranking from mergeData where [Income.Group] = 'High income: OECD'"), c("Ranking"), average)
ddply(sqldf("select Ranking from mergeData where [Income.Group] = 'High income: OECD'"), c("Ranking"), avg)
ddply(sqldf("select Ranking from mergeData where [Income.Group] = 'High income: OECD'"), c("Ranking"), function(df) return(c(AVERAGE=mean(df$Ranking))))
sqldf("select avg(Ranking) from mergeData where [Income.Group] = 'High income: OECD'")
sqldf("select avg(Ranking) from mergeData where [Income.Group] = 'High income: nonOECD'")
ddply(mergeData, .(qantileRank), function(x) return(quantile(x$Ranking, c(0, 0.25, 0.5, 0.75, 1))))
ddply(mergeData, .(Ranking), function(x) return(quantile(x$Ranking, c(0, 0.25, 0.5, 0.75, 1))))
names(mergeData)
ddply(mergeData, .(Ranking), function(x) quantile(x$Ranking, c(0, 0.25, 0.5, 0.75, 1)))
ddply(mergeData, .(Ranking), function(x) quantile(x$Ranking, c(0, 0.25, 0.5, 0.75, 1)), na.rm = TRUE)
ddply(mergeData, .(Ranking), function(x) quantile(x$Ranking, probs = c(0, 0.25, 0.5, 0.75, 1)), na.rm = TRUE)
ddply(mergeData, .(Ranking), function(x) quantile(x$Ranking, probs = c(0, 0.25, 0.5, 0.75, 1)), na.rm = TRUE)
ddply(mergeData, .(Ranking), function(x) quantile(x$Ranking, probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE))
mergeDataByQuantile <- within(mergeDataByQuantile, quantile <- as.integer(cut(Ranking, quantile(Ranking, probs = 0:5/5), include.lowest = TRUE)))
mergeDataByQuantile <- within(mergeData, quantile <- as.integer(cut(Ranking, quantile(Ranking, probs = 0:5/5), include.lowest = TRUE)))
mergeDataByQuantile <- within(mergeData, quantile <- as.integer(cut(Ranking, quantile(Ranking, probs = 0:5/5, na.rm = TRUE), include.lowest = TRUE)))
mergeDataByQuantile[, c("Country", "Ranking", "quantile")]
mergeDataByQuantile[!is.na(mergeDataByQuantile$quantile), c("Country", "Ranking", "quantile")]
mergeDataByQuantile[!is.na(mergeDataByQuantile$quantile) & mergeDataByQuantile$quantile == 1, c("Country", "Ranking", "quantile")]
nrows(mergeDataByQuantile[!is.na(mergeDataByQuantile$quantile) & mergeDataByQuantile$quantile == 1, c("Country", "Ranking", "quantile")])
rows(mergeDataByQuantile[!is.na(mergeDataByQuantile$quantile) & mergeDataByQuantile$quantile == 1, c("Country", "Ranking", "quantile")])
length(mergeDataByQuantile[!is.na(mergeDataByQuantile$quantile) & mergeDataByQuantile$quantile == 1, c("Country", "Ranking", "quantile")])
highestGDP < - mergeDataByQuantile[!is.na(mergeDataByQuantile$quantile) & mergeDataByQuantile$quantile == 1, c("Country", "Ranking", "quantile")]
highestGDP <- mergeDataByQuantile[!is.na(mergeDataByQuantile$quantile) & mergeDataByQuantile$quantile == 1, c("Country", "Ranking", "quantile")]
table(highestGDP)
nrow(highestGDP)
sqldf("select Country from mergeData where [Income.Group] = 'Lower middle income'")
sqldf("select Country from mergeData inner join highestGFP using(Country) where [Income.Group] = 'Lower middle income'")
sqldf("select Country from mergeData inner join highestGDP using(Country) where [Income.Group] = 'Lower middle income'")
sum(mappedCountry$distinctCount)
nrow(mappedCountry)
mappedCountry(with(mappedCountry, order(-Ranking)),)[13,]
mappedCountry[with(mappedCountry, order(-Ranking)),][13,]
mappedCountry
mappedCountry <- subset(mergeData[, c("Country", "Ranking")], !is.na(Ranking))
nrow(mappedCountry)
mappedCountry[with(mappedCountry, order(-Ranking)),][13,]
mergeData[with(mergeData, order(-Ranking)),][12,]
mergeData[with(mergeData, order(-Ranking)),][13,]
mergeData[with(mergeData, order(Ranking)),][13,]
str(gdp$Country)
str(fedStatsCountry$CountryCode)
mergeData
names(mergedData)
names(mergeData)
mergeData <- merge(gdp, fedStatsCountry, by.x = "Country", by.y = "CountryCode", all = TRUE)
nrow(gdp)
tail(gdp, n = 3)
nrow(merge(gdp, fedStatsCountry, by.x = "Country", by.y = "CountryCode", all = TRUE))
subset(merge(gdp, fedStatsCountry, by.x = "Country", by.y = "CountryCode", all = TRUE)[, c("Country")], !is.na(Ranking))
subset(merge(gdp, fedStatsCountry, by.x = "Country", by.y = "CountryCode", all = TRUE)[, c("Country", "Ranking")], !is.na(Ranking))
nrow(subset(merge(gdp, fedStatsCountry, by.x = "Country", by.y = "CountryCode", all = TRUE)[, c("Country", "Ranking")], !is.na(Ranking)))
myNew <- subset(merge(gdp, fedStatsCountry, by.x = "Country", by.y = "CountryCode", all = TRUE)[, c("Country", "Ranking")], !is.na(Ranking))
myNew
myNew[with(myNew, order(-Ranking)),]
